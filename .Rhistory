P <= original_bonferroni_threshold ~ 1
)
)
)
# Check new col
magma_gene_pval_files %>%
map(head)
magma_gene_pval_files <- magma_gene_pval_files %>%
map2(bonferroni_threshold_list,
~ .x %>%
mutate(sig_at_adj_threshold =
case_when(
P > .y ~ 0,
P <= .y ~ 1
)
)
)
# Check new column
magma_gene_pval_files %>%
map(head)
magma_gene_pval_files <- magma_gene_pval_files %>%
map(~ .x %>%
mutate(novel_validated_gene =
case_when(
# If gene is sig at original and new threshold, 0
originally_significant == 1 &
sig_at_adj_threshold == 1 ~ 0,
# If gene is sig at original threshold but not new threshold, 0
originally_significant == 1 &
sig_at_adj_threshold == 0 ~ 0,
# If gene not sig at original threshold but sig at new threshold, 1
originally_significant == 0 &
sig_at_adj_threshold == 1 ~ 1,
# If gene not sig at either threshold, 0
originally_significant == 0 &
sig_at_adj_threshold == 0 ~ 0
)
)
)
# Check new column
magma_gene_pval_files %>%
map(head)
magma_gene_pval_files %>%
map(~ .x %>%
count(originally_significant))
magma_gene_pval_files %>%
map(~ .x %>%
count(sig_at_adj_threshold))
magma_gene_pval_files %>%
map(~ .x %>%
count(novel_validated_gene))
magma_gene_pval_files <- magma_gene_pval_files %>%
map(~ .x %>%
mutate(novel_validated_gene =
case_when(
novel_validated_gene == 1 &
SYMBOL %not_in% original_significant_genes ~ 1,
novel_validated_gene == 1 &
SYMBOL %in% original_significant_genes ~ 0,
TRUE ~ 0
)
)
)
# Check
magma_gene_pval_files %>%
map(~ .x %>%
count(novel_validated_gene))
magma_gene_pval_files %>%
map(~ .x %>%
filter(novel_validated_gene == 1) %>%
distinct(SYMBOL, .keep_all = TRUE) %>%
nrow()
)
magma_gene_pval_files %>%
map(~ .x %>%
filter(novel_validated_gene == 1 &
P < original_bonferroni_threshold) %>%
nrow()
)
magma_gene_pval_files <- magma_gene_pval_files %>%
map(function(x){
# Extract the validated gene names
validated_gene_names <- x %>%
filter(novel_validated_gene == 1) %>%
pull(SYMBOL)
# Recode training genes appearing in validated genes to 0
x %>%
mutate(novel_validated_gene =
case_when(
novel_validated_gene == 1 &
SYMBOL %in% all_training_genes ~ 0,
novel_validated_gene == 1 &
SYMBOL %not_in% all_training_genes ~ 1,
TRUE ~ 0
))
})
# Check
magma_gene_pval_files %>%
map(~ .x %>%
count(novel_validated_gene))
original_GWAS_pvals <- original_GWAS_pvals %>%
arrange(P)
# Check
original_GWAS_pvals %>%
head()
magma_gene_pval_files_mapped <- magma_gene_pval_files_mapped %>%
map(~ .x %>%
arrange(desc(novel_validated_gene), P))
# Check
magma_gene_pval_files_mapped %>%
map(head)
magma_gene_pval_files_mapped %>%
map(~ .x %>%
filter(novel_validated_gene == 1))
validated_genes_list <- magma_gene_pval_files_mapped %>%
map(~ .x %>%
filter(novel_validated_gene == 1) %>%
pull(SYMBOL))
# Check validated genes
validated_genes_list
validate_gene_list_names <- c(
"GWAS",
"DisGeNET",
"Clinvar",
"Union",
"Common"
)
names(validated_genes_list) <- validate_gene_list_names
colours <- c(
'blue',
'red',
'green',
'orange',
'yellow'
)
label_names <- c(
"GWAS",
"DisGeNET",
"Clinvar",
"Union",
"Common"
)
my_color <- setNames(colours, label_names)
validated_gene_venn <- Venn(validated_genes_list)
d_validated <- process_data(validated_gene_venn)
d2_validated <- process_data(validated_gene_venn)
d2_validated@region <- st_polygonize(d_validated@setEdge)
# Create venn diagram
ggplot() +
geom_sf(aes(fill = name), data = venn_region(d2_validated)) +
geom_sf(aes(color = name), data = venn_setedge(d_validated)) +
geom_sf_text(aes(label = name), size = 3, data = venn_setlabel(d_validated)) +
geom_sf_text(aes(label = count), data = venn_region(d_validated)) +
scale_color_manual(values = alpha(my_color, .2)) +
scale_fill_manual(values = alpha(my_color, .2)) +
theme_void() +
theme(legend.title = element_blank())
common_validated_genes <- Reduce(
intersect,
validated_genes_list
)
common_validated_genes
mapped_validated_genes <- magma_gene_pval_files_mapped %>%
map(~ .x %>%
filter(novel_validated_gene == 1))
# Check
mapped_validated_genes %>%
map(nrow)
mapped_validated_genes <- mapped_validated_genes %>%
map(~ .x %>%
count(CHR,
name = "freq"))
# Check
mapped_validated_genes %>%
map(head)
mapped_validated_genes <- mapped_validated_genes %>%
map2(label_names,
~ .x %>%
mutate(gene_list =
.y))
# Check
mapped_validated_genes %>%
map(head)
mapped_validated_genes <- mapped_validated_genes %>%
reduce(bind_rows)
# Check
mapped_validated_genes %>%
dim()
mapped_validated_genes %>%
count(gene_list)
mapped_validated_genes <- mapped_validated_genes %>%
mutate(gene_list =
factor(gene_list,
levels = c("GWAS",
"DisGeNET",
"Clinvar",
"Union",
"Common")
)
)
# Check
mapped_validated_genes %>%
count(gene_list)
mapped_validated_genes %>%
ggplot(aes(x = CHR,
y = freq,
fill = gene_list
)) +
geom_bar(stat = 'identity', colour = "black", alpha = 0.8) +
labs(y = "N",
x = "Chromosome") +
theme_minimal() +
theme(axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black")) +
facet_wrap(~ gene_list, scales = "free_x") +
scale_fill_manual(values = colours) +
theme(strip.text = element_text(colour = "black")) +
guides(fill = guide_legend(title = "Gene list"))
# Combine all the genes into a vector
distinct_validated_genes <- validated_genes_list %>%
reduce(c)
# Convert genes to a tibble
distinct_validated_genes <- distinct_validated_genes %>%
as_tibble()
# Rename default 'value' column
distinct_validated_genes <- distinct_validated_genes %>%
rename("gene" = "value")
# Get the distinct genes
distinct_validated_genes <- distinct_validated_genes %>%
distinct(value)
# Get the distinct genes
distinct_validated_genes <- distinct_validated_genes %>%
distinct(gene)
# Check
distinct_validated_genes %>%
dim()
distinct_validated_genes
distinct_validated_genes$
```
distinct_validated_genes$gene
# Combine all the genes into a vector
distinct_validated_genes <- validated_genes_list %>%
reduce(c)
# Convert genes to a tibble
distinct_validated_genes <- distinct_validated_genes %>%
as_tibble()
# Rename default 'value' column
distinct_validated_genes <- distinct_validated_genes %>%
rename("gene" = "value")
# Get the distinct genes
distinct_validated_genes <- distinct_validated_genes %>%
distinct(gene)
# Check
distinct_validated_genes %>%
dim()
distinct_validated_genes$gene
validated_column_names <- c(
"GWAS",
"DisGeNET",
"Clinvar",
"Union",
"Common"
)
validated_genes_list
validated_column_names <- c(
"GWAS",
"DisGeNET",
"Clinvar",
"Union",
"Common"
)
validated_genes_list
distinct_validated_genes_summary <- validated_genes_list %>%
map2(validated_column_names,
function(x, y){
distinct_validated_genes <- distinct_validated_genes %>%
mutate({ .y } :=
gene %in% .x)
distinct_validated_genes_summary
}
)
distinct_validated_genes_summary <- validated_genes_list %>%
map2(validated_column_names,
function(x, y){
distinct_validated_genes <- distinct_validated_genes %>%
mutate({ .y } :=
gene %in% .x)
distinct_validated_genes_summary
}
)
distinct_validated_genes <- distinct_validated_genes %>%
mutate({ y } :=
gene %in% .x)
distinct_validated_genes_summary <- validated_genes_list %>%
map2(validated_column_names,
function(x, y){
distinct_validated_genes <- distinct_validated_genes %>%
mutate({ y } :=
gene %in% .x)
distinct_validated_genes_summary
}
)
distinct_validated_genes_summary <- validated_genes_list %>%
map2(validated_column_names,
function(x, y){
distinct_validated_genes <- distinct_validated_genes %>%
mutate({{ y }} :=
gene %in% .x)
distinct_validated_genes_summary
}
)
distinct_validated_genes_summary <- validated_genes_list %>%
map2(validated_column_names,
function(x, y){
distinct_validated_genes <- distinct_validated_genes %>%
mutate({{ y }} :=
gene %in% x)
distinct_validated_genes_summary
}
)
distinct_validated_genes_summary <- validated_genes_list %>%
map2(validated_column_names,
function(x, y){
distinct_validated_genes <- distinct_validated_genes %>%
mutate({{ y }} :=
gene %in% x)
distinct_validated_genes
}
)
# Check
distinct_validated_genes_summary
# Join the separate lists together
distinct_validated_genes_summary <- distinct_validated_genes_summary %>%
reduce(full_join)
# Check
distinct_validated_genes_summary
# Combine all the genes into a vector
distinct_validated_genes <- validated_genes_list %>%
reduce(c)
# Convert genes to a tibble
distinct_validated_genes <- distinct_validated_genes %>%
as_tibble()
# Rename default 'value' column
distinct_validated_genes <- distinct_validated_genes %>%
rename("validated_gene" = "value")
# Get the distinct genes
distinct_validated_genes <- distinct_validated_genes %>%
distinct(gene)
# Get the distinct genes
distinct_validated_genes <- distinct_validated_genes %>%
distinct(validated_gene)
# Check
distinct_validated_genes %>%
dim()
distinct_validated_genes$gene
distinct_validated_genes$validated_gene
validated_column_names <- c(
"GWAS",
"DisGeNET",
"Clinvar",
"Union",
"Common"
)
# Find out which genes were validated by each list
distinct_validated_genes_summary <- validated_genes_list %>%
map2(validated_column_names,
function(x, y){
distinct_validated_genes <- distinct_validated_genes %>%
mutate({{ y }} :=
gene %in% x)
distinct_validated_genes
}
)
# Find out which genes were validated by each list
distinct_validated_genes_summary <- validated_genes_list %>%
map2(validated_column_names,
function(x, y){
distinct_validated_genes <- distinct_validated_genes %>%
mutate({{ y }} :=
validated_gene %in% x)
distinct_validated_genes
}
)
# Join the separate lists together
distinct_validated_genes_summary <- distinct_validated_genes_summary %>%
reduce(full_join)
# Check
distinct_validated_genes_summary
distinct_validated_genes_summary %>%
write_csv(
paste0(
analysis_folder_path,
"Validation analyses/GWAS_validation_results/distinct_validated_genes_summary.csv"
)
)
View(magma_gene_pval_files)
View(validated_genes_list)
Gene_set_1_novalidated_list <- validated_genes_list %>%
map2(magma_gene_pval_files,
function(x, y){
# Extract the genes from gene list
genes <- y %>%
pull(SYMBOL)
# Filter original GWAS pval data to remove genes from each MAGMA list
set_1_file <- original_GWAS_pvals %>%
filter(SYMBOL %not_in% genes)
# Filter all set 1 files to remove all unique validated genes
set_1_file %>%
filter(SYMBOL %not_in% y)
})
# Check
Gene_set_1_novalidated_list %>%
map(nrow)
Gene_set_1_list %>%
map2(Gene_set_1_novalidated_list,
~ nrow(.y) - nrow(.x)) # Subtract length of each original list from each new one
iterations <- seq(1, 5, 1)
Gene_set_1_list <- iterations %>%
map2(magma_gene_pval_files,
function(x, y){
# Extract the genes from gene list
genes <- y %>%
pull(SYMBOL)
# Filter original GWAS pval data to only contain non-matching genes
original_GWAS_pvals %>%
filter(SYMBOL %not_in% genes)
})
# Check
Gene_set_1_list %>%
map(nrow)
magma_gene_pval_files %>%
map(~ nrow(original_GWAS_pvals) - nrow(.x))
Gene_set_1_list %>%
map2(Gene_set_1_novalidated_list,
~ nrow(.y) - nrow(.x)) # Subtract length of each original list from each new one
Gene_set_1_novalidated_list <- Gene_set_1_novalidated_list %>%
map(function(x){
# Pull gene symbols
genes <- x %>%
pull(GENE)
# Collapse symbols by tab
paste0(genes, collapse = "    ") %>%
paste("Gene_set_1", ., sep = "    ")
})
# Check
Gene_set_1_novalidated_list %>%
str()
gene_set_1_novalidated_names <- c(
"Gene_set_1_novalidated_GWAS",
"Gene_set_1_novalidated_DisGeNET",
"Gene_set_1_novalidated_Clinvar",
"Gene_set_1_novalidated_Union",
"Gene_set_1_novalidated_Common"
)
names(Gene_set_1_novalidated_list) <- gene_set_1_novalidated_names
# Check
Gene_set_1_novalidated_list %>%
str()
Gene_set_2_novalidated_list <- magma_gene_pval_files %>%
map2(validated_genes_list,
function(x, y){
# Exclude all validated genes from each list
genes <- x %>%
filter(SYMBOL %not_in% y) %>%
pull(GENE)
# Collapse symbols by tab
paste0(genes, collapse = "    ") %>%
paste("Gene_set_2", ., sep = "    ")
})
# Check
Gene_set_2_novalidated_list %>%
str()
magma_gene_pval_files %>%
map2(validated_genes_list,
function(x, y){
# Filter all genes for each list while all excluding non-validated genes
genes <- x %>%
filter(SYMBOL %not_in% y)
# Subtract length of original list of genes from new list
nrow(genes) - nrow(x)
})
gene_set_2_novalidated_names <- c(
"Gene_set_2_novalidated_GWAS",
"Gene_set_2_novalidated_DisGeNET",
"Gene_set_2_novalidated_Clinvar",
"Gene_set_2_novalidated_Union",
"Gene_set_2_novalidated_Common"
)
names(Gene_set_2_novalidated_list) <- gene_set_2_novalidated_names
# Check
Gene_set_2_novalidated_list %>%
str()
magma_gene_set_novalidated_file_names <- c(
"GWAS_gene_set_noval.txt",
"DisGeNET_gene_set_noval.txt",
"Clinvar_gene_set_noval.txt",
"Union_gene_set_noval.txt",
"Common_gene_set_noval.txt"
)
# Check
magma_gene_set_novalidated_file_names
for (i in seq_along(1:5)){
writeLines(
c(Gene_set_1_novalidated_list[[i]],
Gene_set_2_novalidated_list[[i]]),
paste0(
analysis_folder_path,
"magma_v1.10_mac/",
magma_gene_set_novalidated_file_names[i]
)
)
}
